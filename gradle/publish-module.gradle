/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "maven"
apply from: "${rootDir}/gradle/pom.gradle"
apply plugin: "signing"
apply plugin: "com.jfrog.artifactory"

afterEvaluate {
  assert description: "Project $project.path is published, must have a description"
}

configurations {
  pomSignature
}

if (!isSnapshot) {
  tasks.withType(Upload).configureEach {
    repositories.matching { it.name == "mavenInstaller" }.all {
      beforeDeployment { deployment ->
        artifacts {
          pomSignature signing.signPom(deployment), {
            extension = "pom.asc"
          }
        }
      }
    }
  }
}

if (!isSnapshot) {
  signing.sign configurations.published
  project.afterEvaluate {
    project.tasks.named("signPublished", Sign) {
      it.signatures.each {
        if (it.type == "jar.asc") {
          it.extension = "jar.asc"
        }
        if (it.type == "zip.asc") {
          it.extension = "zip.asc"
        }
      }
    }
  }
}

configurations {
  all {
    incoming.afterResolve {
      dependencies.withType(ModuleDependency) { dep ->
        excludeRules.each {
          if ([it.group, it.module].any { it == null }) {
            throw new InvalidUserDataException(
              "Partial exclude for dependency '$dep.group:$dep.name:$dep.version' of $project: [group: $it.group, module: $it.module]\n\nExcludes must specify both group and module and neither can be '*'."
            )
          }
        }
      }
    }
  }
}
